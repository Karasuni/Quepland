@page "/"
@inject HttpClient Http
@inject GameState GameState
@inject MessageManager MessageManager
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject Blazored.LocalStorage.ILocalStorageService asyncLocalStorage
@using System.Threading;
@implements IDisposable


<h1>Hello, Welcome to Quepland!</h1>

@if (GameState.safeToLoad)
{
    @if (debugMode)
    {
        @testString
        <p><button class="btn btn-primary" onclick="@(() => DebugAll99s())">Max Account</button></p>
        <p><button class="btn btn-primary" onclick="@(() => DebugUnlockAllFollowers())">Unlock Followers</button></p>
        <p><button class="btn btn-primary" onclick="@(() => DebugGetMoney())">Gain Money</button></p>
        <p><button class="btn btn-primary" onclick="@(() => DebugOneOfEveryItem())">Get All Items</button></p>
        <p><button class="btn btn-primary" onclick="@(() => DebugGainStrengthLevel())">Gain Strength Level</button></p>
        <p><button class="btn btn-primary" onclick="@(() => SaveDataEncrypted())">Save Encrypted</button></p>
        <p><button class="btn btn-primary" onclick="@(() => LoadDataEncrypted())">Load Encrypted</button></p>
        <p><button class="btn btn-primary" onclick="@(() => AddRoomToHouse())">Add Test Room To House</button></p>
        <p><button class="btn btn-primary" onclick="@(() => DebugUnlockAllAreas())">Unlock All Areas</button></p>
        <p><button class="btn btn-primary" onclick="@(() => DebugJSTest())">Test JS Interop</button></p>
        <p>Item ID:<input type="number" @bind-value="@itemID" @bind-value:event="onchange" /></p>
        <p>Amount:<input type="number" @bind-value="@amount" @bind-value:event="onchange" /></p>
        <p><button class="btn btn-primary" onclick="@(() => GetItem())">Get Item</button></p>

        <ul id="simpleList" class="list-group" @ref="simpleList">
            <li class="list-group-item">This is <a href="http://SortableJS.github.io/Sortable/">Sortable</a></li>
            <li class="list-group-item">It works with Bootstrap...</li>
            <li class="list-group-item">...out of the box.</li>
            <li class="list-group-item">It has support for touch devices.</li>
            <li class="list-group-item">Just drag some elements around.</li>
        </ul>
    }

    @if (GameState.saveDataLoaded == false && saveGameExists && gameHasBeenSaved == false && loadBegun == false)
    {
        <p><button class="btn btn-primary" onclick="@(() => LoadData())">Load Game</button></p>
    }
    else
    {
        <p>Click the bank on your left to begin your journey. You'll find an axe to start off.</p>
        <p><button class="btn btn-primary" disabled onclick="@(() => LoadData())">Load Game</button></p>
    }
    @if (GameState.saveGameExists == false || (GameState.saveDataLoaded == true))
    {
        <p><button class="btn btn-primary" onclick="@(() => SaveData())">Save Game</button></p>
    }
    else
    {
        <p><button class="btn btn-primary" disabled onclick="@(() => SaveData())">Save Game</button></p>
    }

    <br />
    <br />
    @if (userWantsGameReset)
    {
        <p><button class="btn btn-primary" onclick="@(() => ResetGame())">Are you sure?</button></p>
    }
    else
    {
        <p><button class="btn btn-primary" onclick="@(() => AskForReset())">Reset Game</button></p>
    }
}
else
{
    <p>More Loading...</p>
}

@functions{
    private bool safeToLoadGame = false;
    private bool saveGameExists = false;
    private bool loadBegun = false;
    private bool userWantsGameReset = false;
    private bool gameHasBeenSaved = false;
    private bool gameIsRendered = false;
    private bool debugMode = false;
    public string pudding = "Not set.";
    public string encrypt = "This is a whole string, with many things to test! 1234, 50, 100";
    public string testString = "";
    private int itemID;
    private int amount;
    private ElementRef simpleList;
    private SimpleAES Encryptor = new SimpleAES();
    private static string userID;
    private static string token;

    public void AddRoomToHouse()
    {
        GameState.GetPlayer().house.AddRoom(Program.roomManager.GetRoomByID(0));
    }
    public void GetItem()
    {
        GameState.GetPlayerBank().GetInventory().AddMultipleOfItem(Program.itemDatabase.GetItemByID(itemID), amount);
    }
    public void GoToArea()
    {

    }
    public async void DebugJSTest()
    {
        //string returnString = await JSRuntime.InvokeAsync<string>("kongregateFunctions.getUsername");
        await JSRuntime.InvokeAsync<object>("kongregateFunctions.createSortableList", simpleList);
        Console.WriteLine("nothing");


    }
    private async void UpdateHighScores()
    {
        await JSRuntime.InvokeAsync<object>("kongregateFunctions.updateTotalLevelScore", GameState.GetPlayer().GetTotalLevel());
        await JSRuntime.InvokeAsync<object>("kongregateFunctions.updateTotalKills", GameState.totalKills);

    }
    public void SetCulinaryTo43()
    {
        GameState.GetPlayer().GainExperience("Culinary Arts", 80000);
    }
    public void GoToDebugArea()
    {
        Program.areaManager.GetAreaByID(68).IsUnlocked = true;
    }
    public void EncryptionTest()
    {
        encrypt = Encryptor.EncryptToString(encrypt);
        StateHasChanged();
    }
    public void DecryptionTest()
    {
        encrypt = Encryptor.DecryptString(encrypt);
        StateHasChanged();
    }
    public void DebugUnlockAllFollowers()
    {
        foreach (Follower f in Program.followerManager.GetFollowers())
        {
            f.IsUnlocked = true;
        }
    }
    public void DebugUnlockAllAreas()
    {
        Program.areaManager.UnlockAllAreas();
        StateHasChanged();
        GameState.UpdateState();
    }
    public void DebugGainStrengthLevel()
    {
        GameState.GetPlayer().GainExperience("Strength", Extensions.GetExperienceRequired(GameState.GetPlayer().GetLevel("Strength")) - GameState.GetPlayer().GetSkill("Strength").SkillExperience);
        GameState.UpdateState();
        StateHasChanged();
    }
    public void DebugOneOfEveryItem()
    {

        GameState.GetPlayerBank().GetInventory().AddOneOfMultipleItemsUnlimited(Program.itemDatabase.GetAllItems());

    }
    public void DebugAll99s()
    {
        foreach (Skill s in GameState.GetPlayer().GetSkills())
        {
            GameState.GetPlayer().GainExperience(s.SkillName, 15000000);
        }
    }
    public void DebugGetMoney()
    {
        GameState.GetPlayerBank().GetInventory().AddMultipleOfItemUnlimited(Program.itemDatabase.GetGold(), 100000);
    }
    private void AskForReset()
    {
        userWantsGameReset = true;
    }
    private void ResetGame()
    {
        MessageManager.AddMessage("Save Game Reset. Please reload the page to avoid errors.");
        localStorage.Clear();
        StateHasChanged();
    }
    private string SaveDataEncrypted()
    {
        localStorage.SetItem("eSave", GetSaveDataString());
        UpdateHighScores();
        return "";
    }
    private string LoadDataEncrypted()
    {
        LoadDataFromString(localStorage.GetItem<string>("eSave"));
        GameState.UpdateState();
        this.StateHasChanged();
        return "";
    }
    private string SaveData()
    {
        while(!GameState.safeToSave)
        {
            Thread.Sleep(5);
        }
        localStorage.SetItem("Bank", GameState.GetPlayerBank().GetInventory().ToString());
        localStorage.SetItem("Skills", GameState.GetPlayer().GetSkillString());
        localStorage.SetItem("Inventory", GameState.GetPlayerInventory().ToStringSorted());
        localStorage.SetItem("Areas", Program.areaManager.SaveAreas());
        localStorage.SetItem("Followers", Program.followerManager.ToString());
        localStorage.SetItem("HP", GameState.GetPlayer().CurrentHP);
        if (GameState.GetPlayer().activeFollower != null)
        {
            localStorage.SetItem("ActiveFollower", GameState.GetPlayer().activeFollower.id);
        }

        localStorage.SetItem("AlchemyRecipes", GameState.GetPlayer().GetRecipes());
        List<int> ids = new List<int>();
        foreach (KeyValuePair<GameItem, int> pair in GameState.GetPlayerInventory().GetEquippedItems())
        {
            ids.Add(pair.Key.Id);
        }
        localStorage.SetItem("EquippedItems", ids);
        localStorage.SetItem("SaveGameExists", true);
        localStorage.SetItem("NPC", Program.npcManager.GetNPCData());
        SaveDataEncrypted();

        MessageManager.AddMessage("Your game has been saved.");
        gameHasBeenSaved = true;
        GameState.saveDataLoaded = true;
        GameState.saveGameExists = true;
        return "";
    }

    private void TestLocalStorage()
    {

        string success = "Local storage could not be accessed. Saving is not possible without working local storage. Please enable cookies to save your game.";
        try
        {
            localStorage.SetItem("testString", "success");
            success = localStorage.GetItem<string>("testString");
        }
        catch
        {
            MessageManager.AddMessage(success);
        }

    }
    public string GetSaveDataString()
    {
        return GameState.GetSaveString(Program.areaManager, Program.followerManager, Program.npcManager, Program.buildingManager);
    }
    private void LoadDataFromString(string data)
    {
        string decryptedData = Encryptor.DecryptString(data);


        string[] lines = decryptedData.Split('#');
        testString = lines[0];

        Dictionary<GameItem, int> bankItems = Extensions.GetItemDicFromString(lines[0], Program.itemDatabase);
        List<Skill> skills = Extensions.GetSkillsFromString(lines[1]);
        Dictionary<GameItem, int> invItems = Extensions.GetItemDicFromString(lines[2], Program.itemDatabase);

        GameState.GetPlayerBank().GetInventory().LoadItems(bankItems);
        GameState.GetPlayer().SetSkills(skills);
        GameState.GetPlayerInventory().LoadItems(invItems);

        Program.areaManager.LoadSaveData(lines[3]);
        Program.followerManager.LoadSaveData(lines[4]);

        if (int.TryParse(lines[5], out int hp))
        {
            GameState.GetPlayer().CurrentHP = hp;
        }
        else
        {
            GameState.GetPlayer().CurrentHP = GameState.GetPlayer().MaxHP;
        }

        if (int.TryParse(lines[6], out int activeFollower))
        {
            GameState.GetPlayer().activeFollower = Program.followerManager.GetFollowerByID(activeFollower);
        }

        List<string> recipes = lines[7].Split('/').ToList();
        GameState.GetPlayer().LoadRecipes(recipes);


        List<int> equippedItems = new List<int>();
        foreach (string s in lines[8].Split('/') ?? Enumerable.Empty<string>())
        {
            if (int.TryParse(s, out int id))
            {
                equippedItems.Add(id);
            }
        }
        if (equippedItems != null && equippedItems.Count > 0)
        {
            GameState.GetPlayer().EquipItems(equippedItems);
        }
        if (lines.Length > 9 && lines[9] != null)
        {
            string[] settings = lines[9].Split(',');
            GameState.isSplitView = bool.Parse(settings[0]);
            GameState.compactBankView = bool.Parse(settings[1]);
            if(settings.Length > 2 && settings[2] != null)
            {
                GameState.expensiveItemThreshold = int.Parse(settings[2]);
            }
            if(settings.Length > 3 && settings[3] != null)
            {
                GameState.totalKills = int.Parse(settings[3]);
            }
        }
        if (lines.Length > 10 && lines[10] != null)
        {
            Program.npcManager.LoadNPCData(lines[10]);
        }
        if (lines.Length > 11 && lines[11] != null)
        {
            GameState.sushiHouseRice = int.Parse(lines[11].Split(',')[0]);
            GameState.sushiHouseSeaweed = int.Parse(lines[11].Split(',')[1]);
        }
        if (lines.Length > 12 && lines[12] != null)
        {
            string[] salts = lines[12].Split('/');
            foreach (string salt in salts)
            {
                if (salt.Length > 0)
                {
                    int id = int.Parse(salt.Split(',')[0]);
                    int amount = int.Parse(salt.Split(',')[1]);
                    Program.buildingManager.GetBuildingByID(id).Salt = amount;
                }
            }
        }
        if (lines.Length > 13 && lines[13] != null)
        {
            string[] tanneries = lines[13].Split('@');

            foreach (string tannery in tanneries)
            {
                if (tannery.Length > 0)
                {
                    Building t = Program.buildingManager.GetBuildingByID(int.Parse(tannery.Split('>')[0]));
                    string[] tanneryData = tannery.Split('>')[1].Split('_');

                    foreach (string s in tanneryData)
                    {
                        if (s.Length > 0)
                        {
                            TanningSlot slot = new TanningSlot();
                            slot.SetDataFromString(s);
                            t.TanneryItems.Add(slot);

                        }

                    }
                }
            }
        }
        if (lines.Length > 14 && lines[14] != null)
        {
            if (bool.TryParse(lines[14].Split(',')[0], out bool isHunting))
            {
                if (isHunting)
                {
                    GameState.isHunting = true;
                    GameState.huntingAreaID = int.Parse(lines[14].Split(',')[1]);
                    GameState.huntingStartTime = DateTime.Parse(lines[14].Split(',')[2]);
                    GameState.huntingEndTime = DateTime.Parse(lines[14].Split(',')[3]);
                    Program.huntingManager.LoadHunt(GameState.huntingStartTime, GameState.huntingEndTime);

                }
            }
        }
        if(lines.Length > 15 && lines[15] != null)
        {
            GameState.GetPlayerBank().LoadTabsFromString(lines[15]);
        }
        MessageManager.AddMessage("Save game loaded.");

        GameState.saveDataLoaded = true;
        GameState.UpdateState();
        this.StateHasChanged();
    }
    private void LoadData()
    {
        try
        {
            LoadDataEncrypted();
        }
        catch
        {
            loadBegun = true;
            Dictionary<GameItem, int> bankItems = Extensions.GetItemDicFromString(localStorage.GetItem<String>("Bank"), Program.itemDatabase);
            Dictionary<GameItem, int> invItems = Extensions.GetItemDicFromString(localStorage.GetItem<String>("Inventory"), Program.itemDatabase);
            List<Skill> skills = Extensions.GetSkillsFromString(localStorage.GetItem<string>("Skills"));
            GameState.GetPlayer().SetSkills(skills);
            List<int> equippedItems = localStorage.GetItem<List<int>>("EquippedItems");
            GameState.GetPlayerBank().GetInventory().LoadItems(bankItems);
            GameState.GetPlayerInventory().LoadItems(invItems);

            GameState.GetPlayer().CurrentHP = localStorage.GetItem<int>("HP");



            Program.followerManager.LoadSaveData(localStorage.GetItem<String>("Followers"));

            if (Program.followerManager.GetFollowerByID(localStorage.GetItem<int>("ActiveFollower")).IsUnlocked)
            {
                GameState.GetPlayer().activeFollower = Program.followerManager.GetFollowerByID(localStorage.GetItem<int>("ActiveFollower"));
            }

            GameState.GetPlayer().LoadRecipes(localStorage.GetItem<List<string>>("AlchemyRecipes"));
            Program.areaManager.LoadSaveData(localStorage.GetItem<String>("Areas"));
            if (equippedItems != null && equippedItems.Count > 0)
            {
                GameState.GetPlayer().EquipItems(equippedItems);
            }
            Program.npcManager.LoadNPCData(localStorage.GetItem<String>("NPC"));
            MessageManager.AddMessage("Save game loaded.");

        }


        GameState.saveDataLoaded = true;
        if (GameState.autoSaveTimer != null)
        {
            GameState.autoSaveTimer.Dispose();
            GameState.autoSaveTimer = null;
        }
        GameState.autoSaveTimer = new Timer(new TimerCallback(_ =>
        {
            try
            {
                SaveData();
            }
            catch
            {
                MessageManager.AddMessage("Failed to auto save. Please make a local backup before closing the game.", "red");
            }
            GameState.saveToPlayFab++;
            if(GameState.saveToPlayFab > GameState.saveToPlayFabEvery)
            {
                Program.playfabManager.Save(GameState.GetSaveStringEncrypted(Program.areaManager, Program.followerManager, Program.npcManager, Program.buildingManager, false));
                GameState.saveToPlayFab = 0;
            }
        }), null, 60000, 60000);

        GameState.UpdateState();
        this.StateHasChanged();
    }
    protected override void OnInit()
    {
        GameState.StateChanged += OnGameStateChanged;
        //saveGameExists = localStorage.GetItem<bool>("SaveGameExists");





        GameState.UpdateState();
        this.StateHasChanged();
    }
    protected async override Task OnInitAsync()
    {
        saveGameExists = await asyncLocalStorage.GetItemAsync<bool>("SaveGameExists");
        try
        {
            userID = await JSRuntime.InvokeAsync<string>("kongregateFunctions.getUserID");
            token = await JSRuntime.InvokeAsync<string>("kongregateFunctions.getToken");
        }
        catch
        {
            Console.WriteLine("Failed to get username and token.");
            if(userID != null)
            {
                Console.WriteLine(userID);
            }
            userID = "";
            token = "";

        }
        GameState.saveGameExists = saveGameExists;
        if (GameState.gameDataLoaded == false)
        {
            Program.gatherManager.SetGameState(GameState);
            Program.huntingManager.SetGameState(GameState);

            GameState.LoadPlayerData(Http);

            await Program.itemDatabase.LoadItems(Http);
            await Program.areaManager.LoadAreas(Http);
            await Program.buildingManager.LoadBuildings(Http);
            await Program.followerManager.LoadFollowers(Http);
            Program.npcManager.LoadNPCs(Http);
            Program.battleManager.LoadMonsters(Http);
            Program.roomManager.LoadRooms(Http);
            Program.furnitureManager.LoadFurniture(Http);
            GameState.GetPlayer().SetMessageManager(MessageManager);
            GameState.GetPlayer().CurrentHP = 50;
            GameState.GetPlayerBank().AddItemsToCurrentTab(Program.itemDatabase.GetAllItemIDs());
            GameState.GetPlayerBank().GetInventory().isBank = true;
            GameState.gameDataLoaded = true;
            GameState.safeToLoad = true;
        }
        else
        {
            GameState.safeToLoad = true;
        }
        if (saveGameExists == false)
        {
            if (GameState.autoSaveTimer != null)
            {
                GameState.autoSaveTimer.Dispose();
                GameState.autoSaveTimer = null;
            }
            GameState.autoSaveTimer = new Timer(new TimerCallback(_ =>
            {
                try
                {
                    SaveData();
                }
                catch
                {
                    MessageManager.AddMessage("Failed to auto save. Please make a local backup before closing the game.", "red");
                }

            }), null, 60000, 60000);
        }
        try
        {
            Program.playfabManager.TryLogin(userID, token);
        }
        catch
        {
            Console.WriteLine("Couldn't connect to Playfab.");
        }

        GameState.UpdateState();
        this.StateHasChanged();
    }
    protected override void OnAfterRender()
    {
        safeToLoadGame = true;
    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}