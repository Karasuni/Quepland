@page "/Bank"
@inject HttpClient Http
@inject GameState GameState
@inject MessageManager MessageManager

@implements IDisposable

<h1>Hello, this is your bank!</h1>
<p><button class="btn btn-primary" onclick="@(() => DepositAll())">Deposit All</button></p>


<p>
    <EditForm Model="@withdrawAmountModel" OnValidSubmit="@SetWithdrawAmount">
        <DataAnnotationsValidator />
        <ValidationSummary />

        Withdraw X:<InputNumber id="withdrawamount" @bind-Value="@withdrawAmountModel.withdrawAmount" />

    </EditForm>
</p>
<p>
    Search:<input type="text" @bind-value="@searchString" @bind-value:event="oninput" />
</p>
<div class="dropdown">
    <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Sort By
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        <a class="dropdown-item" onclick="@(()=>SetSortStyle(0))">Name</a>
        <a class="dropdown-item" onclick="@(()=>SetSortStyle(1))">Amount</a>
        <a class="dropdown-item" onclick="@(()=>SetSortStyle(2))">Action Group</a>
        <a class="dropdown-item" onclick="@(()=>SetSortStyle(3))">Damage</a>
        <a class="dropdown-item" onclick="@(()=>SetSortStyle(4))">Value</a>
    </div>
</div>
<br />
@if (!GameState.compactBankView)
{
    <div class="bank-table">
        <table style="width:100%">
            <thead>
                <tr style="padding:.2rem">
                    <th align="left">Item</th>
                    <th>Description</th>
                    <th style="text-align:right">Amount</th>
                </tr>
            </thead>
            <tbody>
                @if (GameState.GetPlayerBank() != null && GameState.isGathering == false)
                {

                    @foreach (KeyValuePair<GameItem, int> item in GameState.GetPlayerBank().GetInventory().GetItemsSorted(sortStyle))
                    {
                        @if ((searchString == null || searchString == "") || item.Key.ItemName.ToLower().Contains(searchString.ToLower()))
                        {
                            <tr class="buddy-top" style="padding:.2rem">
                                <td style="font-weight:bold; padding:.2rem"><img src="data/ItemIcons/@(item.Key.Icon + ".png")" style="width:40px;opacity:0.6" />@item.Key.ItemName</td>
                                <td style="padding:.2rem">@item.Key.ItemDescription</td>
                                <td style="padding:.2rem" align="right">@item.Value</td>
                            </tr>
                            if (item.Key.IsEquipable)
                            {
                                <tr style="padding:.2rem" title="DPS:@((float)item.Key.Damage / (item.Key.AttackSpeed / 1000f))">
                                    <td style="padding:.2rem" colspan="3">Gather Speed Bonus:@(item.Key.GatherSpeedBonus), Damage:@(item.Key.Damage), Attack Speed:@(item.Key.AttackSpeed / 1000f)</td>
                                </tr>
                            }
                            if (item.Key.IsArrow)
                            {
                                <tr style="padding:.2rem">
                                    <td style="padding:.2rem">Damage:@item.Key.Damage</td>
                                </tr>
                            }

                            <tr class="buddy-mid" style="padding:.2rem">
                                <td style="padding:.2rem" align="left">Withdraw </td>
                                <td style="padding:.2rem" align="left">
                                    <button class="btn btn-primary" onclick="@(() => Withdraw(item.Key, 1))">1</button>
                                    <button class="btn btn-primary" onclick="@(() => Withdraw(item.Key, 5))">5</button>
                                    <button class="btn btn-primary" onclick="@(() => Withdraw(item.Key, withdrawAmountModel.withdrawAmount))">@withdrawAmount</button>
                                    <button class="btn btn-primary" onclick="@(() => Withdraw(item.Key, int.MaxValue))">All</button>
                                </td>
                                <td style="padding:.2rem" align="center"></td>
                            </tr>
                            @if (GameState.GetPlayer().activeFollower != null && GameState.GetPlayer().activeFollower.AutoCollectSkill == "Banking" && item.Key.Id != 0)
                            {
                                <tr class="buddy-mid" style="padding:.2rem">
                                    <td>Have follower sell:</td>
                                    <td>
                                        <button class="btn btn-success" onclick="@(() => Sell(item, 1))">1</button>
                                        <button class="btn btn-success" onclick="@(() => Sell(item, 5))">5</button>
                                        <button class="btn btn-success" onclick="@(() => Sell(item, withdrawAmountModel.withdrawAmount))">@withdrawAmount</button>
                                        <button class="btn btn-success" onclick="@(() => Sell(item, int.MaxValue))">All</button>
                                    </td>
                                </tr>
                            }
                        }

                    }


                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="table table-hover">
        <table style="width:100%; padding:.2rem">
            <thead>
                <tr>
                    <th>Item</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                @if (GameState.GetPlayerBank() != null && GameState.isGathering == false)
                {

                    @foreach (KeyValuePair<GameItem, int> item in GameState.GetPlayerBank().GetInventory().GetItemsSorted(sortStyle))
                    {
                        @if((searchString == null || searchString == "") || (item.Key.ItemName.ToLower().Contains(searchString.ToLower())))
                        {
                            <tr class="bank-compact-top">
                                <td style="font-weight:bold; padding:.2rem"><img src="data/ItemIcons/@(item.Key.Icon + ".png")" style="width:30px;opacity:0.6" /><br />@item.Key.ItemName</td>
                                <td style="padding:.2rem">@item.Value</td>
                                <td style="vertical-align:middle;padding:.2rem">
                                    <button class="btn btn-primary" onclick="@(() => Withdraw(item.Key, 1))">1</button>
                                    <button class="btn btn-primary" onclick="@(() => Withdraw(item.Key, 5))">5</button>
                                    <button class="btn btn-primary" onclick="@(() => Withdraw(item.Key, withdrawAmountModel.withdrawAmount))">@withdrawAmount</button>
                                    <button class="btn btn-primary" onclick="@(() => Withdraw(item.Key, int.MaxValue))">All</button>
                                </td>
                            </tr>
                            @if(GameState.GetPlayer().activeFollower != null && GameState.GetPlayer().activeFollower.AutoCollectSkill == "Banking" && item.Key.Id != 0)
                            {
                                <tr class="bank-compact">
                                    <td>Have follower sell:</td>
                                    <td style="padding:.2rem"></td>
                                    <td>
                                        <button class="btn btn-success" onclick="@(() => Sell(item, 1))">1</button>
                                        <button class="btn btn-success" onclick="@(() => Sell(item, 5))">5</button>
                                        <button class="btn btn-success" onclick="@(() => Sell(item, withdrawAmountModel.withdrawAmount))">@withdrawAmount</button>
                                        <button class="btn btn-success" onclick="@(() => Sell(item, int.MaxValue))">All</button>
                                    </td>
                                </tr>
                            }
                         }
                    }
                 }      
            </tbody>
        </table>
    </div>
}
@functions{

    public int sortStyle = 0;
    public int withdrawAmount = 1;
    public string searchString = "";
    private WithdrawAmountModel withdrawAmountModel = new WithdrawAmountModel();

    private void SetWithdrawAmount()
    {
        withdrawAmount = withdrawAmountModel.withdrawAmount;
        GameState.bankWithdrawAmount = withdrawAmount;
        GameState.UpdateState();
        this.StateHasChanged();
    }
    public void SetSortStyle(int newVal)
    {
        sortStyle = newVal;
        GameState.bankSortStyle = newVal;
    }
    private string DepositAll()
    {
        GameState.safeToSave = false;
        GameState.GetPlayerBank().GetInventory().AddItems(GameState.GetPlayerInventory().GetUnequippedItems());
        GameState.GetPlayerInventory().EmptyInventoryOfUnequippedItems();
         GameState.safeToSave = true;
        GameState.UpdateState();

        StateHasChanged();
        return "";
    }
    private string Withdraw(GameItem item, int amount)
    {
        GameState.safeToSave = false;
        if (amount < 0)
        {
            amount = 0;
            withdrawAmount = 0;
        }
        int maxWithdraw;
        //If the item is stackable and the player has a stack in their inventory already, or the player has space for another item
        if ((item.IsStackable && GameState.GetPlayerInventory().HasItem(item) && GameState.GetPlayerInventory().GetAvailableSpaces() == 0) ||
             item.IsStackable && GameState.GetPlayerInventory().GetAvailableSpaces() > 0)
        {
            maxWithdraw = Math.Min(amount, GameState.GetPlayerBank().GetInventory().GetNumberOfItem(item));
        }
        else
        {
            //Gets the smallest of the amount, inventory space, and number in the bank.
            maxWithdraw = Math.Min(Math.Min(amount, GameState.GetPlayerInventory().GetAvailableSpaces()), GameState.GetPlayerBank().GetInventory().GetAmountOfItem(item));
        }
        if(GameState.GetPlayerInventory().AddMultipleOfItem(item, maxWithdraw))
        {
            GameState.GetPlayerBank().GetInventory().RemoveItems(item, maxWithdraw);
        }

        GameState.safeToSave = true;
        GameState.UpdateState();
        return "";
    }
    private string Sell(KeyValuePair<GameItem, int> item, int amount)
    {
         GameState.safeToSave = false;
        if (amount > item.Value)
        {
            amount = item.Value;
        }
        if(amount < 0)
        {
            return "";
        }
        GameState.GetPlayerBank().GetInventory().RemoveItems(item.Key, amount);
        GameState.GetPlayerBank().GetInventory().AddMultipleOfItem(Program.itemDatabase.GetGold(), (int)((item.Key.Value * amount) / 2d));
         GameState.safeToSave = true;
        GameState.UpdateState();
        return "";
    }
    protected override void OnInit()
    {

        GameState.StateChanged += OnGameStateChanged;
        sortStyle = GameState.bankSortStyle;
        GameState.canBank = true;
        GameState.canSell = false;
        withdrawAmount = GameState.bankWithdrawAmount;
        //Give the player an axe if they have no items.
        if (GameState.GetPlayerBank().GetInventory().GetTotalNumberOfItems() == 0 && GameState.GetPlayerInventory().GetTotalNumberOfItems() == 0)
        {
            GameState.GetPlayerBank().GetInventory().AddItem(Program.itemDatabase.GetItemByID(12));
            MessageManager.AddMessage("You find a stone axe in your bank account.");
        }
        GameState.UpdateState();

        this.StateHasChanged();

    }
    void IDisposable.Dispose()
    {
        GameState.canBank = false;
        GameState.UpdateState();
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}