@page "/House"
@inject HttpClient Http
@inject GameState GameState
@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper
@implements IDisposable

<h1>Welcome Home</h1>

@LoadHouse()
@LoadBuildableRoomDropdown()
@ShowRoomData()
@BuildNewRoomButton()


@functions{

    private string newRoomName;
    private RenderFragment LoadHouse()
    {
        return builder =>
        {
            builder.OpenElement(1, "div");
            builder.AddAttribute(2, "class", "dropdown");
            builder.AddAttribute(2, "style", "margin-bottom:10px");
            builder.OpenElement(3, "button");

            builder.AddAttribute(4, "class", "btn btn-primary dropdown-toggle");
            builder.AddAttribute(5, "type", "button");
            builder.AddAttribute(6, "id", "dropdownMenuButton");
            builder.AddAttribute(7, "data-toggle", "dropdown");
            builder.AddAttribute(8, "aria-haspopup", "true");
            builder.AddAttribute(9, "aria-expanded", "false");
            builder.AddContent(10, "Choose a room to enter");
            builder.CloseElement();
            builder.OpenElement(11, "div");
            builder.AddAttribute(12, "class", "dropdown-menu");
            builder.AddAttribute(13, "aria-labelledby", "dropdownMenuButton");
            foreach (Room room in GameState.GetPlayer().house.GetRooms())
            {

                builder.OpenElement(14, "a");
                builder.AddAttribute(15, "class", "dropdown-item");
                builder.AddAttribute(16, "onclick", () => GoToRoom(room));
                builder.AddContent(17, room.Name);
                builder.CloseElement();


            }

            builder.CloseElement();
            builder.CloseElement();
        };
    }
    private RenderFragment LoadBuildableRoomDropdown()
    {
        return builder =>
        {
            builder.OpenElement(1, "div");
            builder.AddAttribute(2, "class", "dropdown");
            builder.AddAttribute(2, "style", "margin-bottom:10px");
            builder.OpenElement(3, "button");

            builder.AddAttribute(4, "class", "btn btn-primary dropdown-toggle");
            builder.AddAttribute(5, "type", "button");
            builder.AddAttribute(6, "id", "dropdownMenuButton");
            builder.AddAttribute(7, "data-toggle", "dropdown");
            builder.AddAttribute(8, "aria-haspopup", "true");
            builder.AddAttribute(9, "aria-expanded", "false");
            if (newRoomName == null)
            {
                builder.AddContent(10, "Build a New Room");
            }
            else
            {
                builder.AddContent(10, newRoomName);
            }

            builder.CloseElement();
            builder.OpenElement(11, "div");
            builder.AddAttribute(12, "class", "dropdown-menu");
            builder.AddAttribute(13, "aria-labelledby", "dropdownMenuButton");
            foreach (Room room in Program.roomManager.GetRooms())
            {

                builder.OpenElement(14, "a");
                builder.AddAttribute(15, "class", "dropdown-item");
                builder.AddAttribute(16, "onclick", () => SetNewRoomName(room.Name));
                builder.AddContent(17, room.Name);
                builder.CloseElement();


            }

            builder.CloseElement();
            builder.CloseElement();
        };
    }
    private RenderFragment BuildNewRoomButton()
    {
        return builder =>
        {
            builder.OpenElement(0, "p");
            builder.OpenElement(1, "button");
            builder.AddAttribute(2, "class", "btn btn-primary");
            builder.AddAttribute(3, "style", "margin:10px");
            builder.AddAttribute(4, "onclick", () => BuildNewRoom());
            if (newRoomName == null)
            {
                builder.AddAttribute(5, "disabled", true);
            }
            if (string.IsNullOrEmpty(newRoomName))
            {
                builder.AddContent(6, "Build New Room");
            }
            else
            {
                builder.AddContent(6, "Build " + newRoomName);
            }
            
            builder.CloseElement();
            builder.CloseElement();
        };

    }
    private RenderFragment ShowRoomData()
    {
        return builder =>
        {
            if(string.IsNullOrEmpty(newRoomName) == false)
            {
                Room room = Program.roomManager.GetRoomByName(newRoomName);
                builder.OpenElement(0, "p");
                builder.AddContent(1, room.Name);
                builder.CloseElement();
                builder.OpenElement(2, "p");
                builder.AddContent(3, "Level Required:" + room.ConstructionLevelRequired);
                builder.CloseElement();
                builder.OpenElement(4, "p");
                builder.AddContent(5, "Planks:" + room.PlanksRequired + " " + GetPlankString(room.MinimumPlankLevel) + " or better.");
                builder.CloseElement();
                builder.OpenElement(6, "p");
                builder.AddContent(7, "Bars:" + room.BarsRequired + " " + GetBarString(room.MinimumBarLevel) + "s or better.");
                builder.CloseElement();
            }
        };
    }
    public string GetPlankString(int level)
    {
        return Program.itemDatabase.GetLogs()[level].ItemName;
    }
    public string GetBarString(int level)
    {
        return Program.itemDatabase.GetSmithingBars()[level].ItemName;
    }
    private void BuildNewRoom()
    {
        Room newRoom = Program.roomManager.GetRoomByName(newRoomName);
        GameState.GetPlayer().house.AddRoom(newRoom);
        StateHasChanged();
    }
    private void SetNewRoomName(string name)
    {
        newRoomName = name;
        StateHasChanged();
    }
    private void GoToRoom(Room room)
    {
        UriHelper.NavigateTo("/House/" + room.URL);
        Console.WriteLine("This ran.");
    }
    protected override void OnInit()
    {
        GameState.StateChanged += OnGameStateChanged;
        this.StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}