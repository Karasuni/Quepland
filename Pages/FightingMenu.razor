@page "/FightingMenu/{thisArea}"
@inject GameState  GameState
@inject MessageManager  MessageManager
@inject IJSRuntime JSRuntime
@using System.Threading;
@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper

@if (area != null)
{
    <p>You are seeking enemies to fight in @area.Name</p>
    @winString
    <br />
    @LoadBattleMenu()
    @if (battleFound)
    {
        @LoadBattle()
    }

}

@functions{

    [Parameter]
    private string thisArea { get; set; }
    private Area area;
    Random rand = new Random();
    private bool battleFound;
    private bool battleStarted;
    private Monster opponent;



    private bool autoFight;
    private List<Monster> possibleMonsters = new List<Monster>();
    private string areaURL;
    private string winString = "";

    private RenderFragment LoadBattleMenu()
    {
        return builder =>
        {
            builder.OpenElement(0, "button");
            builder.AddAttribute(0, "class", "btn btn-primary");
            builder.AddAttribute(0, "style", "margin-bottom:10px");
            builder.AddAttribute(0, "onclick", () => FindBattle());
            if (battleStarted || autoFight)
            {
                builder.AddAttribute(0, "disabled", true);
                builder.AddAttribute(0, "title", "You can't do this while battling!");
            }
            builder.AddContent(0, "Find Battle");
            builder.CloseElement();

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.OpenElement(0, "button");
            builder.AddAttribute(0, "class", "btn btn-primary");
            builder.AddAttribute(0, "style", "margin-bottom:10px");
            builder.AddAttribute(0, "onclick", () => StartAutoFighting());
        //If there is a battle, the player has no follower, or the player's follower is not a fighter, or is already auto fighting.
        if (battleStarted ||
            (GameState.GetPlayer().activeFollower == null) ||
            (GameState.GetPlayer().activeFollower != null && GameState.GetPlayer().activeFollower.AutoCollectSkill != "Fighting") ||
            autoFight)
            {
                builder.AddAttribute(0, "disabled", true);
                builder.AddAttribute(0, "title", "You'll need a follower who can help you find enemies to do this.");
            }
            builder.AddContent(0, "Auto Battle");
            builder.CloseElement();
            if (autoFight)
            {
                builder.OpenElement(0, "br");
                builder.CloseElement();

                builder.OpenElement(0, "button");
                builder.AddAttribute(0, "class", "btn btn-primary");
                builder.AddAttribute(0, "style", "margin-bottom:10px");
                builder.AddAttribute(0, "onclick", () => StopAutoBattling());
                builder.AddContent(0, "Stop Battling");
                builder.CloseElement();
            }
        };
    }
    private RenderFragment LoadBattle()
    {
        return builder =>
        {
            builder.OpenElement(0, "p");
            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:left");
            builder.AddContent(1, opponent.Name);
            builder.CloseElement();
            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:right");
            builder.AddContent(1, "You");
            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.OpenElement(0, "p");
            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:left");
            builder.AddContent(1, opponent.CurrentHP + "/" + opponent.HP);
            builder.CloseElement();

            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:right");
            builder.AddContent(1, GameState.GetPlayer().CurrentHP + "/" + GameState.GetPlayer().MaxHP);
            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.AddContent(0, LoadHPBars());

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.OpenElement(0, "button");
            builder.AddAttribute(0, "class", "btn btn-primary");
            builder.AddAttribute(0, "style", "margin-bottom:10px");
            builder.AddAttribute(0, "onclick", () => StartBattle());
            if (battleStarted == true)
            {
                builder.AddAttribute(0, "disabled", true);
                builder.AddAttribute(0, "title", "You can't do this while battling.");
            }
            builder.AddContent(0, "Start Battle");
            builder.CloseElement();

        };
    }
    private RenderFragment LoadHPBars()
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "progress");

            builder.OpenElement(2, "div");
            builder.AddAttribute(3, "class", "progress-bar bg-success");
            builder.AddAttribute(4, "style", "width:" + ((float)opponent.CurrentHP / opponent.HP) * 100 + "%");
            builder.AddAttribute(5, "role", "progressbar");
            builder.AddAttribute(6, "aria-valuenow", "" + ((float)opponent.CurrentHP / opponent.HP) * 100);
            builder.AddAttribute(7, "aria-valuemin", "0");
            builder.AddAttribute(8, "aria-valuemax", "" + opponent.HP);
            builder.CloseElement();
            builder.CloseElement();
        };
    }
    public void StartAutoFighting()
    {
        autoFight = true;
        GameState.isFighting = true;
        if (GameState.autoFightTimer != null)
        {
            GameState.autoFightTimer.Dispose();
            GameState.autoFightTimer = null;
        }
        MessageManager.AddMessage(GameState.GetPlayer().activeFollower.Name + " looks for an enemy for you to fight.");
        GameState.autoFightTimer = new Timer(new TimerCallback(_ =>
        {
            AutoBattle();
        }), null, GameState.GetPlayer().activeFollower.AutoCollectSpeed, GameState.GetPlayer().activeFollower.AutoCollectSpeed);
        GameState.UpdateState();
        this.StateHasChanged();
    }
    public void AutoBattle()
    {
        if (GameState.GetPlayer().activeFollower != null & GameState.GetPlayer().activeFollower.AutoCollectSkill == "Fighting")
        {
            if (battleFound == false)
            {
                GameState.isFighting = true;
                MessageManager.AddMessage(GameState.GetPlayer().activeFollower.Name + " found a battle!");
                FindBattle();
                StartBattle();
            }
        }

    }
    public void FindBattle()
    {
        opponent = possibleMonsters[rand.Next(0, possibleMonsters.Count)];
        MessageManager.AddMessage("You encounter a " + opponent.Name);
        opponent.CurrentHP = opponent.HP;
        battleFound = true;
    }
    public void StartBattle()
    {
        battleStarted = true;
        GameState.isFighting = true;
        if (GameState.attackTimer != null)
        {
            GameState.attackTimer.Dispose();
        }
        if (GameState.monsterAttackTimer != null)
        {
            GameState.monsterAttackTimer.Dispose();
        }
        GameState.attackTimer = new Timer(new TimerCallback(_ =>
        {
            Attack();
            GameState.UpdateState();
            this.StateHasChanged();
        }), null, GameState.GetPlayer().GetWeaponAttackSpeed(), GameState.GetPlayer().GetWeaponAttackSpeed());

        GameState.monsterAttackTimer = new Timer(new TimerCallback(_ =>
        {
            BeAttacked();
            GameState.UpdateState();
            this.StateHasChanged();
        }), null, 1000 * opponent.AttackSpeed, 1000 * opponent.AttackSpeed);
        if (GameState.GetPlayer().GetWeapon() != null && GameState.GetPlayer().GetWeapon().ActionRequired == "Archery")
        {
            Attack();
        }
        GameState.UpdateState();
        this.StateHasChanged();
    }
    public void Attack()
    {
        if (battleFound)
        {
            string battleString = "";
            string color = "black";
            int dmgDealt = Math.Min(GameState.GetPlayer().GetDamageDealt(opponent), opponent.CurrentHP);
            if (GameState.GetPlayer().GetWeapon() != null)
            {
                GameItem weapon = GameState.GetPlayer().GetWeapon();
                if (string.IsNullOrEmpty(weapon.StatusEffect) == false)
                {
                    if (rand.NextDouble() < weapon.EffectOdds)
                    {
                        color = "blue";
                        if (weapon.StatusEffect == "Drain")
                        {

                            color = "red";

                        }

                        ApplyStatusEffect(weapon.StatusEffect, weapon.EffectDuration, dmgDealt);

                    }
                }
                if (weapon.ActionRequired == "Archery")
                {
                    if (GameState.GetPlayerInventory().HasArrows())
                    {
                        if (string.IsNullOrEmpty(GameState.GetPlayerInventory().GetStrongestArrows().StatusEffect) == false)
                        {
                            if (rand.NextDouble() < GameState.GetPlayerInventory().GetStrongestArrows().EffectOdds)
                            {
                                ApplyStatusEffect(GameState.GetPlayerInventory().GetStrongestArrows().StatusEffect, GameState.GetPlayerInventory().GetStrongestArrows().EffectDuration, dmgDealt);
                                color = "blue";
                            }
                        }
                        if (rand.Next(2) == 0)
                        {
                            GameState.GetPlayerInventory().RemoveOneOfItem(GameState.GetPlayerInventory().GetStrongestArrows());
                        }
                        battleString = "You shoot the " + opponent.Name + " for " + dmgDealt + " damage.";
                    }
                    else
                    {
                        battleString = "You whack the " + opponent.Name + " with your bow for " + dmgDealt + " damage.";
                    }
                }
                else
                {
                    battleString = "You dealt " + dmgDealt + " damage to the " + opponent.Name + ".";
                }

                if (opponent.Weakness.Contains(weapon.ActionRequired))
                {
                    GameState.GetPlayer().GainExperienceFromWeapon(weapon, dmgDealt * 2);
                    battleString += " It seemed to be very effective!";
                }
                else if (opponent.Strength.Contains(weapon.ActionRequired))
                {
                    GameState.GetPlayer().GainExperienceFromWeapon(weapon, dmgDealt / 2);
                    battleString += " It didn't seem to be very effective...";
                }
                else
                {
                    GameState.GetPlayer().GainExperienceFromWeapon(weapon, dmgDealt);
                }
            }
            else
            {
                GameState.GetPlayer().GainExperience("Strength", dmgDealt * 3);
                battleString = "You punch the " + opponent.Name + " for " + dmgDealt + " damage.";
            }
            MessageManager.AddMessage(battleString, color);
            opponent.CurrentHP -= dmgDealt;

            if (opponent.CurrentHP <= 0)
            {
                WinBattle();
            }
        }

    }
    public void BeAttacked()
    {
        if (battleFound)
        {
            opponent.StatusEffectTimeLeft--;
            if (opponent.CurrentStatusEffect == "Freeze" && opponent.StatusEffectTimeLeft > 0)
            {
                MessageManager.AddMessage(opponent.Name + " is frozen and could not attack.");
                return;
            }
            int dmg = Math.Max(1, Extensions.GetGaussianRandomInt(opponent.Damage, opponent.Damage / 2d));
            dmg = (int)(dmg * Math.Max(1 - Extensions.CalculateArmorDamageReduction(GameState.GetPlayer()), 0.05d));
            GameState.GetPlayer().GainExperience("HP", Math.Min(GameState.GetPlayer().CurrentHP, dmg) * 8);
            GameState.GetPlayer().CurrentHP -= dmg;
            MessageManager.AddMessage("You took " + dmg + " damage from the " + opponent.Name + "'s attack.");

            if (GameState.GetPlayer().CurrentHP <= 0)
            {
                LoseBattle();
            }
            if (opponent.StatusEffect != null && battleFound)
            {
                if (opponent.StatusEffect == "Drain")
                {

                    int maxHP = opponent.HP - opponent.CurrentHP;
                    opponent.CurrentHP += Math.Min(maxHP, dmg);
                    if (Math.Min(maxHP, dmg) > 0)
                    {
                        MessageManager.AddMessage(opponent.Name + " absorbed " + Math.Min(maxHP, dmg) + " HP!");
                    }

                }
            }
        }

    }
    public void WinBattle()
    {
        GameState.totalKills++;
        MessageManager.AddMessage("You defeated the " + opponent.Name);
        if (opponent.AlwaysDrops != null)
        {
            if (GameState.GetPlayerInventory().AddOneOfMultipleItems(Program.itemDatabase.GetItems(opponent.AlwaysDrops)))
            {
                MessageManager.AddMessage("You got " + Extensions.GetItemsAsString(Program.itemDatabase.GetItems(opponent.AlwaysDrops)));
            }
            else
            {
                MessageManager.AddMessage("Your inventory is full, so you didn't pick up any drops.");
            }
        }
        GameItem drop = Program.itemDatabase.GetItemByID(Extensions.GetDrop(opponent));
        if (drop != null)
        {
            if (GameState.GetPlayerInventory().AddMultipleOfItem(drop, 1))
            {
                MessageManager.AddMessage("You got a " + drop.ItemName);
            }
            else
            {
                MessageManager.AddMessage("Your inventory is full, so you didn't pick up any drops.");
            }
        }

        battleFound = false;
        EndTimers();
        battleStarted = false;

        winString = "You won!";
        if (autoFight)
        {
            StartAutoFighting();
        }
        else
        {
            GameState.isFighting = false;
        }
        StateHasChanged();
        GameState.UpdateState();
        JSRuntime.InvokeAsync<object>("kongregateFunctions.updateTotalKills", GameState.totalKills);
    }
    public void LoseBattle()
    {
        MessageManager.AddMessage("You died to " + opponent.Name);
        GameState.GetPlayer().CurrentHP = GameState.GetPlayer().MaxHP;
        battleFound = false;
        battleStarted = false;
        autoFight = false;
        EndTimers();
        GameState.isFighting = false;
        winString = "You lost!";
    }
    private void StopAutoBattling()
    {
        battleFound = false;
        battleStarted = false;
        autoFight = false;
        EndTimers();
        MessageManager.AddMessage("You stop looking for fights.");
        GameState.isFighting = false;
    }
    private void EndTimers()
    {
        if (GameState.attackTimer != null)
        {
            GameState.attackTimer.Dispose();
            GameState.attackTimer = null;
        }
        if (GameState.monsterAttackTimer != null)
        {
            GameState.monsterAttackTimer.Dispose();
            GameState.monsterAttackTimer = null;
        }
        if (GameState.autoFightTimer != null)
        {
            GameState.autoFightTimer.Dispose();
            GameState.autoFightTimer = null;
        }
        if (autoFight == false)
        {
            GameState.isFighting = false;
        }

        GameState.UpdateState();
        this.StateHasChanged();
    }
    private void ApplyStatusEffect(string effect, int duration, int dmgDealt)
    {
        if (opponent.ImmuneTo == null || opponent.ImmuneTo.Contains(effect) == false)
        {

            if (effect == "Drain")
            {
                int maxHPGain = GameState.GetPlayer().MaxHP - GameState.GetPlayer().CurrentHP;
                GameState.GetPlayer().CurrentHP += Math.Min(dmgDealt / duration, maxHPGain);
                MessageManager.AddMessage("You absorbed " + Math.Min(dmgDealt / duration, maxHPGain) + " HP from the " + opponent.Name, "red");
            }
            else
            {
                opponent.CurrentStatusEffect = effect;
                opponent.StatusEffectTimeLeft = duration;
                if (GameState.GetPlayer().GetWeapon().ActionRequired == "Archery")
                {
                    MessageManager.AddMessage(opponent.Name + " was affected by the " + GameState.GetPlayerInventory().GetStrongestArrows().ItemName + "' effect!", "blue");
                }
                else
                {
                    MessageManager.AddMessage(opponent.Name + " was affected by the " + GameState.GetPlayer().GetWeapon().ItemName + "'s effect!", "blue");
                }
            }




        }

    }
    protected override void OnParametersSet()
    {
        SetArea(thisArea);
    }
    private void SetArea(string areaString)
    {
        area = Program.areaManager.GetAreaByURL(areaString);
        GameState.currentArea = area;
        possibleMonsters = Program.battleManager.GetMonstersForArea(area);
    }
    protected override void OnInit()
    {
        GameState.StateChanged += OnGameStateChanged;
        GameState.canSell = false;
        this.StateHasChanged();
        GameState.UpdateState();
    }
    public void Dispose()
    {
        autoFight = false;
        EndTimers();
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}